# SillyTavern扩展开发：浮动按钮与弹窗页面教程

## 引言
本教程旨在提供一个在SillyTavern扩展中，创建功能完备、布局稳定的浮动按钮和弹窗页面的详细指南。我们将以 `AutoCardUpdaterExtension` v3.8.6 版本中的角色卡查看器为例，解析其最终采用的、经过多次迭代验证成功的核心技术方案。

本教程涵盖了从HTML注入、CSS精确定位到JavaScript交互逻辑的完整流程，特别是解决了在SillyTavern这种复杂宿主环境中常见的布局问题。

---

## 第一步：通过JavaScript动态创建HTML元素

为了保持扩展的独立性，避免直接修改SillyTavern的核心文件，最佳实践是在扩展的 `index.js` 中通过JavaScript动态创建并注入所有UI元素。

### 1.1 创建浮动按钮
在 `initializeCharCardViewer_ACU` 函数中，我们首先检查按钮是否已存在，然后创建并添加到 `<body>` 中。

```javascript
// index.js -> initializeCharCardViewer_ACU()

// 检查按钮是否已存在，避免重复创建
if (jQuery_API_ACU(`#${CHAR_CARD_VIEWER_BUTTON_ID}`).length > 0) {
    return;
}

// 定义按钮的HTML结构，包含ID、title和FontAwesome图标
const buttonHtml = `<div id="${CHAR_CARD_VIEWER_BUTTON_ID}" title="查看角色卡" class="fa-solid fa-address-card"></div>`;

// 使用jQuery将按钮HTML字符串附加到文档的body中
jQuery_API_ACU('body').append(buttonHtml);

// 后续逻辑...
```

### 1.2 创建弹窗页面
弹窗页面的HTML结构相对复杂，因此我们专门用一个函数 `createCharCardViewerPopupHtml_ACU` 来生成它。这个函数会根据传入的数据（例如角色列表）动态构建HTML，然后在需要时（如点击按钮时）再注入到 `<body>` 中。

```javascript
// index.js -> showCharCardViewerPopup_ACU()

// 1. 调用函数生成完整的弹窗HTML字符串
const popupHtml = createCharCardViewerPopupHtml_ACU(characters);

// 2. 将生成的HTML注入到body中
jQuery_API_ACU('body').append(popupHtml);

// 3. 获取刚创建的弹窗元素的jQuery对象，以备后续操作
const $popup = jQuery_API_ACU(`#${CHAR_CARD_VIEWER_POPUP_ID}`);

// 4. 为弹窗内部的元素（如关闭按钮、保存按钮）绑定事件
bindCharCardViewerPopupEvents_ACU($popup);
```
**核心思想**：UI元素的生命周期由JS完全掌控，需要时创建，关闭时销毁 (`closeCharCardViewerPopup_ACU` 函数会调用 `.remove()`)，从而实现干净、无冲突的集成。

---

## 第二步：稳健的CSS布局与样式

这是确保UI在SillyTavern复杂环境中正确显示的关键。经过多次失败的尝试，我们最终确定了以下最可靠的CSS方案。

### 2.1 浮动按钮的样式
```css
/* style.css */
#autoCardUpdater-viewer-button {
    position: fixed !important; /* !important确保不会被覆盖。fixed使其相对于浏览器窗口定位 */
    z-index: 1050;              /* 一个足够高的z-index，确保按钮在绝大多数UI元素之上 */
    cursor: grab;               /* 初始状态为可抓取手势 */
    width: 48px; 
    height: 48px;
    /* ... 其他装饰性样式 ... */
}
```
**解析**: `position: fixed` 是浮动按钮的核心。它使得按钮脱离文档流，其位置是相对于浏览器视口（viewport）来计算的，因此即使用户滚动页面，按钮也会保持在原位。

### 2.2 弹窗页面的最终布局方案
```css
/* style.css */
.char-card-viewer-popup {
    /* 强制应用定位和尺寸，防止被SillyTavern的全局样式污染 */
    position: fixed !important;

    /* 核心定位方案：放弃所有垂直居中技巧，采用简单的顶部对齐 */
    top: 5vh !important;               /* 距离屏幕顶部5%的视口高度，为SillyTavern顶栏留出安全距离 */
    height: 90vh !important;            /* 弹窗高度为屏幕的90%，这样顶部和底部总共留有10vh的边距 */
    
    /* 核心水平居中方案：只在水平方向居中，避免垂直transform带来的问题 */
    left: 50% !important;
    transform: translateX(-50%) !important; 

    width: 95vw !important;             /* 在移动端，宽度占屏幕的95% */
    max-width: 800px !important;        /* 在大屏幕上，最大宽度不超过800px */

    /* Flexbox布局，用于内部元素(header, body, footer)的垂直排列 */
    display: flex;
    flex-direction: column;
    overflow: hidden; /* 隐藏弹窗自身级别的溢出，强制由内部body滚动 */
}
```
**为什么这个方案有效？**
经过多次失败后我们发现，SillyTavern的某些容器可能影响了 `transform: translateY(-50%)` 的计算，导致垂直居中失败。最终方案彻底放弃了垂直居中，改为简单的、可预测的顶部对齐。`top: 5vh` 和 `height: 90vh` 直接定义了弹窗的垂直范围，它将永远占据从屏幕5%到95%的位置，这是最稳健的做法。

### 2.3 弹窗内部的滚动区域
```css
/* style.css */
.char-card-viewer-popup-body {
    flex-grow: 1;         /* 关键！此元素将自动填充父容器(弹窗)中所有剩余的垂直空间 */
    overflow-y: auto;     /* 当内容超出其高度时，允许垂直滚动 */
    padding: 20px;

    /* 根据用户要求隐藏滚动条 */
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none;  /* IE and Edge */
}
.char-card-viewer-popup-body::-webkit-scrollbar {
    display: none; /* Chrome, Safari, and Opera */
}
```
**解析**: 这是实现弹窗内容滚动的核心。在`.char-card-viewer-popup`设置为 `display: flex; flex-direction: column;` 后，其子元素 `header` 和 `tabs` 都是固定高度的，只有 `body` 设置了 `flex-grow: 1`。这意味着 `body` 会像海绵一样，自动撑满父容器中除了 `header` 和 `tabs` 之外的所有可用空间。因为父容器的高度是固定的 (`90vh`)，所以 `body` 的高度也是固定的。此时，`overflow-y: auto` 就能在内容超出时完美工作。

---

## 第三步：强大的JavaScript交互逻辑

### 3.1 按钮拖动与位置记忆
```javascript
// index.js -> makeButtonDraggable_ACU()
function makeButtonDraggable_ACU(button) {
    // ... mousedown, mousemove, mouseup 事件处理 ...

    // 在鼠标松开时，保存按钮的最终位置
    jQuery_API_ACU(document).on('mouseup.charCardViewer', function () {
      // ...
      // 使用localStorage保存按钮的top和left样式值
      localStorage.setItem(
        STORAGE_KEY_VIEWER_BUTTON_POS_ACU,
        JSON.stringify({ top: button.css('top'), left: button.css('left') }),
      );
    });
}

// 在按钮初始化时，读取并应用保存的位置
// index.js -> initializeCharCardViewer_ACU()
const savedPosition = JSON.parse(localStorage.getItem(STORAGE_KEY_VIEWER_BUTTON_POS_ACU) || 'null');
if (savedPosition) {
  $viewerButton.css({ top: savedPosition.top, left: savedPosition.left });
} else {
  // 如果没有保存的位置，则设置一个默认初始位置
  $viewerButton.css({ top: '120px', right: '10px', left: 'auto' });
}
```
**解析**: 通过 `localStorage`，我们可以持久化存储用户的自定义设置。每次用户拖动按钮后，我们记录其最终的 `top` 和 `left` 值。下次页面加载时，我们读取这些值并应用到按钮上，从而实现了位置记忆。

### 3.2 解决窗口大小调整导致按钮消失的BUG
```javascript
// index.js -> initializeCharCardViewer_ACU()

// 添加窗口大小调整事件监听器
let resizeTimeout_ACU;
jQuery_API_ACU(window).on('resize.charCardViewer', function () {
    // 使用setTimeout进行去抖动，避免频繁触发，提高性能
    clearTimeout(resizeTimeout_ACU);
    resizeTimeout_ACU = setTimeout(function () {
        const button = jQuery_API_ACU(`#${CHAR_CARD_VIEWER_BUTTON_ID}`);
        if (!button.length) return;

        // 获取按钮当前位置和窗口尺寸
        let currentLeft = button.offset().left;
        let currentTop = button.offset().top;
        const maxLeft = jQuery_API_ACU(window).width() - button.outerWidth();
        const maxTop = jQuery_API_ACU(window).height() - button.outerHeight();

        // 检查并修正位置，确保按钮不会超出窗口边界
        if (currentLeft > maxLeft) currentLeft = maxLeft;
        if (currentLeft < 0) currentLeft = 0;
        if (currentTop > maxTop) currentTop = maxTop;
        if (currentTop < 0) currentTop = 0;

        // 应用修正后的位置并重新保存
        button.css({ top: currentTop + 'px', left: currentLeft + 'px' });
        localStorage.setItem(
            STORAGE_KEY_VIEWER_BUTTON_POS_ACU,
            JSON.stringify({ top: button.css('top'), left: button.css('left') })
        );
    }, 150);
});
```
**解析**: 这是确保UI健壮性的关键一步。当浏览器窗口大小改变时，此事件监听器会重新检查按钮的位置。如果它因为窗口缩小而跑到了屏幕外，代码会强制将其拉回边界内，并更新存储的位置。这彻底解决了按钮“消失”的问题。

---
## 总结

创建一个稳定、可靠的浮动UI系统，关键在于：
1.  **动态注入**: 保持扩展的独立性。
2.  **稳健的CSS**: 放弃在复杂环境中不稳定的布局技巧（如垂直`transform`），回归最简单、最可预测的CSS规则（如固定`top`和`height`）。
3.  **Flexbox布局**: 利用 `flex-grow` 和 `overflow` 精确控制内部元素的尺寸和滚动行为。
4.  **健壮的JS**: 不仅要处理用户的直接交互（点击、拖动），还要考虑边界情况，如窗口大小调整，并持久化用户的偏好设置。
